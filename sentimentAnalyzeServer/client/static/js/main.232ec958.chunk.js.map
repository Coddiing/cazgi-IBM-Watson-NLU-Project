{"version":3,"sources":["EmotionTable.js","TableRows.js","SentimentTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","JSON","stringify","this","props","emotions","className","React","Component","TableRows","row","sentiment","push","style","color","data","processData","SentimentTable","map","index","arr","console","log","Object","keys","emotion","App","state","innercomp","rows","cols","id","mode","sentimentOutput","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","text","axios","get","then","response","resp","result","targets","alert","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.232ec958.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n      return (  \r\n        <div>\r\n          {/*You can remove this line and the line below. */}\r\n          {JSON.stringify(this.props.emotions)}\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n            {\r\n                //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\r\n            }\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default EmotionTable;\r\n","import React from 'react'\r\nimport './bootstrap.min.css';\r\n\r\nclass TableRows extends React.Component{\r\n\r\n    processData() {\r\n        var row = []\r\n         if (this.props.sentiment===\"joy\" ) {\r\n             row.push(\r\n            <tr  style={{color:\"green\"}} >\r\n                <td>{this.props.sentiment}</td>\r\n                <td>{ this.props.data[this.props.sentiment] }</td>\r\n            </tr>\r\n             )\r\n            \r\n        } else if ( this.props.sentiment===\"disgust\" || \r\n                    this.props.sentiment===\"fear\" || \r\n                    this.props.sentiment===\"anger\" )\r\n        {\r\n            row.push(\r\n                <tr  style={{color:\"red\"}} >\r\n                    <td>{this.props.sentiment}</td>\r\n                    <td>{ this.props.data[this.props.sentiment] }</td>\r\n                </tr>\r\n                 )\r\n\r\n        } else {\r\n            row.push(\r\n                    <tr  style={{color:\"yellow\"}} >\r\n                        <td>{this.props.sentiment}</td>\r\n                        <td>{ this.props.data[this.props.sentiment] }</td>\r\n                    </tr>\r\n                 )\r\n        }\r\n     \r\n        return row;\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n                        this.processData()[0]\r\n               \r\n        )\r\n    }\r\n}\r\n\r\nexport default TableRows;","import React from 'react';\r\nimport './bootstrap.min.css';\r\nimport TableRows from './TableRows.js';\r\n\r\n\r\nclass SentimentTable extends React.Component {\r\n    processData() {\r\n        var resp = this.props.emotions\r\n        resp.map ( ( data, index, arr ) => {\r\n            console.log( data )\r\n        } )\r\n    }\r\n    render() {\r\n      return (  \r\n        <div>\r\n          {/*You can remove this line and the line below. */}\r\n          {JSON.stringify(this.props.emotions)}\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Emotions</th>\r\n                    <th>Numbers</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    \r\n                    this.props.emotions.map ( ( data, index, arr ) => {\r\n                        \r\n                        return Object.keys( data.emotion ).map( (sentiment, index, arr) => {\r\n                           \r\n                            \r\n                            return <TableRows  sentiment={sentiment} data={data.emotion} />\r\n                        }\r\n                             \r\n                        )\r\n                    \r\n                    } )\r\n                    //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\r\n    \r\n                }\r\n            </tbody>\r\n\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default SentimentTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport SentimentTable from './SentimentTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n                        mode: \"text\",\r\n                        sentimentOutput:[],\r\n                        sentiment:true\r\n                    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    let text = document.getElementById(\"textinput\").value\r\n\r\n    if ( text==\"\" )\r\n    {\r\n      alert( \"Empty!\" )\r\n      return;\r\n    }\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+text;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+text;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response)=>{\r\n      console.log( response )\r\n\r\n  \r\n      var resp = response.data.result.emotion.targets\r\n\r\n     \r\n\r\n      this.setState({sentimentOutput: <SentimentTable emotions={resp} />});\r\n\r\n\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n\r\n      // this.setState({sentimentOutput:response.data});\r\n      // let output = response.data;\r\n      // if(response.data === \"positive\") {\r\n      //   output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\r\n      // } else if (response.data === \"negative\"){\r\n      //   output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\r\n      // } else {\r\n      //   output = <div style={{color:\"orange\",fontSize:20}}>{response.data}</div>\r\n      // }\r\n      // this.setState({sentimentOutput:output});\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n\r\n      this.setState({sentiment:false});\r\n      let ret = \"\";\r\n      let url = \".\";\r\n      if(this.state.mode === \"url\") {\r\n        url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n      } else {\r\n        url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n      }\r\n      ret = axios.get(url);\r\n\r\n      ret.then((response)=>{\r\n        console.log( response )\r\n        this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\r\n      });\r\n\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n\r\n          <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n          <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    \r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}